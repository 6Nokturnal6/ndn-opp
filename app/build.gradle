import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'

    defaultConfig {
        versionCode 3
        versionName "1.0"
        applicationId "pt.ulusofona.copelabs.ndn"
        minSdkVersion 19
        targetSdkVersion 21
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    dataBinding {
        enabled true
    }

    sourceSets.main.jni.srcDirs = []
    sourceSets.main.jniLibs.srcDir 'src/main/libs'

    task ndkBuild(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd()
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    task cleanNative(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd(), 'clean'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}


dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'cat.ereza:customactivityoncrash:2.2.0'
    implementation 'com.balsikandar.android:crashreporter:1.0.9'
    implementation 'com.android.support:appcompat-v7:25.3.1'
    implementation 'com.android.support:design:25.3.1'
    implementation 'net.named-data.jndn-xx:jndn-xx-util:0.0.1'
    implementation 'net.named-data:jndn:0.14'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation group: 'com.intel.jndn.management', name: 'jndn-management', version: '1.1.0'

}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        ndkbuild += ".cmd"

    return ndkbuild
}